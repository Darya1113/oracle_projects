DROP TRIGGER update_department;
/
---------------------------
DROP TABLE teachers;
/
--------------------------
--Определение таблицы "my_teachers" для хранения информации о преподавателях
CREATE TABLE my_teachers (
    id NUMBER PRIMARY KEY,
    name VARCHAR2(100),
    department VARCHAR2(100)
);
/
---------------------------
--Вставка данных в таблицу "my_teachers"
INSERT INTO my_teachers (id, name, department) VALUES (1, 'Иван Иванов', 'Математика');
INSERT INTO my_teachers (id, name, department) VALUES (2, 'Петр Петров', 'Математика');
INSERT INTO my_teachers (id, name, department) VALUES (3, 'Алексей Сидоров', 'Физика');
/
----------------------------
SELECT * 
FROM my_teachers;
----------------------------
/*--Создание типов "DeptChangeRec" и "DeptChangeTab" для хранения изменений названия кафедры
CREATE OR REPLACE TYPE DeptChangeRec AS OBJECT (old_dept VARCHAR2(100), new_dept VARCHAR2(100));
----------------------------
CREATE OR REPLACE TYPE DeptChangeTab IS TABLE OF DeptChangeRec;*/
----------------------------
--Создание типов "DeptChangeRec" и "DeptChangeTab" для хранения изменений названия кафедры
-- Объявление нового типа с ID
CREATE OR REPLACE TYPE DeptChangeRec AS OBJECT (id NUMBER, old_dept VARCHAR2(100), new_dept VARCHAR2(100));

-- Таблица для хранения изменений
CREATE OR REPLACE TYPE DeptChangeTab IS TABLE OF DeptChangeRec;


--Создание триггера "update_department" для автоматического обновления названий кафедр
CREATE OR REPLACE TRIGGER update_department
FOR UPDATE OF department ON my_teachers
COMPOUND TRIGGER

    dept_changes DeptChangeTab := DeptChangeTab();  -- Инициализация коллекции
    
    BEFORE EACH ROW IS
    BEGIN
        IF :NEW.department <> :OLD.department THEN
            -- Добавление изменений в коллекцию
            dept_changes.EXTEND;
            dept_changes(dept_changes.LAST) := DeptChangeRec(:OLD.id, :OLD.department, :NEW.department);
        END IF;
    END BEFORE EACH ROW;

    AFTER STATEMENT IS
    BEGIN
        -- Проход по всем записям в коллекции
        FOR i IN 1 .. dept_changes.COUNT LOOP
            DECLARE
                dept_count INTEGER;
            BEGIN
                SELECT COUNT(*) INTO dept_count FROM my_teachers WHERE department = dept_changes(i).new_dept AND id != dept_changes(i).id;
                IF dept_count = 0 THEN
                    -- Если название кафедры уникально, обновляем всех
                    UPDATE my_teachers SET department = dept_changes(i).new_dept
                    WHERE department = dept_changes(i).old_dept;
                -- Иначе ничего не делаем, так как преподаватель перешёл на другую уже существующую кафедру
                END IF;
            END;
        END LOOP;
    END AFTER STATEMENT;

END update_department;




---------------------------
-- Изменение названия кафедры одного из преподавателей
UPDATE my_teachers SET department = 'Математика' WHERE id = 1;

-- Проверка результатов
SELECT * FROM my_teachers;

-------------------------
UPDATE my_teachers SET department = CASE 
    WHEN department = 'Математика' THEN 'Прикладная математика'
    WHEN department = 'Физика' THEN 'Теоретическая физика'
END
WHERE department IN ('Математика', 'Физика');

-----------------
UPDATE my_teachers SET department = 'Математика'
WHERE id = 1;
------------------
DELETE FROM my_teachers
WHERE id = 3;
